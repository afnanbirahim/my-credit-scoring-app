# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qAkjj4yT1Ei1Vf68-WaFikt9_IgYGD3i
"""

import streamlit as st
import numpy as np
import pandas as pd
import joblib

# Load model, scaler, and feature list
model = joblib.load("final_model.pkl")
scaler = joblib.load("scaler.pkl")
feature_names = joblib.load("feature_names.pkl")

# App title
st.title("Microcredit Loan Eligibility Prediction")
st.markdown("Enter applicant details below to check loan eligibility.")

# User Inputs
loan_amount = st.number_input("Loan Amount (৳)", min_value=1000, max_value=500000, step=5000, value=20000)
income = st.number_input("Family Monthly Income (৳)", min_value=1000, max_value=500000, step=1000, value=10000)
savings = st.number_input("Total Family Savings (৳)", min_value=0, max_value=500000, step=1000, value=3000)
loan_duration = st.number_input("Loan Duration (Days)", min_value=7, max_value=720, step=7, value=120)

# Optional: pre-fill categorical one-hot fields (if applicable)
# For simplicity, set all one-hot fields to 0 unless toggled
extra_features = {name: 0.0 for name in feature_names if name not in [
    'Loan Amount', 'Family Income in Taka', 'Total Savings',
    'Debt_to_Income', 'Repayment_Ratio', 'Savings_to_Income', 'Loan_Duration_Days'
]}

# Auto-compute engineered features
debt_to_income = loan_amount / (income + 1)
repayment_ratio = 0.85  # assume conservative default
savings_to_income = savings / (income + 1)

# Build full input vector
user_input = {
    "Loan Amount": loan_amount,
    "Family Income in Taka": income,
    "Total Savings": savings,
    "Debt_to_Income": debt_to_income,
    "Repayment_Ratio": repayment_ratio,
    "Savings_to_Income": savings_to_income,
    "Loan_Duration_Days": loan_duration
}
user_input.update(extra_features)

# Create input DataFrame and scale
input_df = pd.DataFrame([user_input], columns=feature_names)
input_scaled = scaler.transform(input_df)

# Predict
if st.button("Check Eligibility"):
    prediction = model.predict(input_scaled)[0]
    probability = model.predict_proba(input_scaled)[0][1]

    if prediction == 1:
        st.success(f"✅ Eligible for loan (Confidence: {probability:.2f})")
    else:
        st.error(f"❌ High risk – not eligible (Confidence: {1 - probability:.2f})")

    st.markdown("---")
    st.subheader("Prediction Details")
    st.write("Model Confidence Score:", round(probability, 4))
    st.write("Input Features (scaled):")
    st.dataframe(pd.DataFrame(input_scaled, columns=feature_names))

import joblib

joblib.dump(final_model, "final_model.pkl")
joblib.dump(scaler, "scaler.pkl")
joblib.dump(X.columns.tolist(), "feature_names.pkl")